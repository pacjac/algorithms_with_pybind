from __future__ import annotations

from typing import overload

class UF:
    def __init__(self, N: int) -> None: ...
    def union_elements(self, p: int, q: int) -> None: ...
    def connected(self, p: int, q: int) -> bool: ...

class QuickFind(UF):
    def __init__(self, N: int) -> None: ...
    def union_elements(self, p: int, q: int) -> None: ...
    def union(self, p: int, q: int) -> None: ...  # alias for union_elements
    def connected(self, p: int, q: int) -> bool: ...

class QuickUnion(UF):
    def __init__(self, N: int) -> None: ...
    def union_elements(self, p: int, q: int) -> None: ...
    def union(self, p: int, q: int) -> None: ...  # alias for union_elements
    def connected(self, p: int, q: int) -> bool: ...

class WeightedUnion(QuickUnion):
    def __init__(self, N: int) -> None: ...
    def union_elements(self, p: int, q: int) -> None: ...
    def union(self, p: int, q: int) -> None: ...  # alias for union_elements
    def connected(self, p: int, q: int) -> bool: ...
